<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.gonnaup.accountmanagement.dao.AccountDao">

    <resultMap type="org.gonnaup.account.domain.Account" id="AccountMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="applicationName" column="application_name" jdbcType="VARCHAR"/>
        <result property="accountName" column="account_name" jdbcType="VARCHAR"/>
        <result property="accountNickname" column="account_nickname" jdbcType="VARCHAR"/>
        <result property="accountAvatar" column="account_avatar" jdbcType="BLOB"/>
        <result property="accountState" column="account_state" jdbcType="VARCHAR"/>
        <result property="lastLogintime" column="last_logintime" jdbcType="TIMESTAMP"/>
        <result property="tag" column="tag" jdbcType="VARCHAR"/>
        <result property="createtime" column="createtime" jdbcType="TIMESTAMP"/>
        <result property="updatetime" column="updatetime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap type="org.gonnaup.account.domain.AccountHeader" id="AccountHeaderMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="accountName" column="account_name" jdbcType="VARCHAR"/>
        <result property="accountNickname" column="account_nickname" jdbcType="VARCHAR"/>
        <result property="accountAvatar" column="account_avatar" jdbcType="BLOB"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="AccountMap">
        select
          id, application_name, account_name, account_nickname, account_avatar, account_state, last_logintime, tag, createtime, updatetime
        from account
        where id = #{id}
    </select>

    <select id="queryHeaderById" resultMap="AccountHeaderMap">
        select
          id, account_name, account_nickname, account_avatar
        from account
        where id = #{id}
    </select>

    <select id="queryHeaderByApplicationnameAndAccountname" resultMap="AccountHeaderMap">
        select
                id, account_name, account_nickname, account_avatar
        from account
        where application_name = #{applicationName}
          and account_name = #{accountName}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAllConditionalByLimit" resultMap="AccountMap" databaseId="mysql">
        select
        id, application_name, account_name, account_nickname, account_avatar, account_state, last_logintime, tag,
        createtime, updatetime
        from account
        <where>
            <if test="account.id != null">
                and id = #{account.id}
            </if>
            <if test="account.applicationName != null and account.applicationName != ''">
                and application_name = #{account.applicationName}
            </if>
            <if test="account.accountName != null and account.accountName != ''">
                and account_name like concat('%', #{account.accountName} , '%')
            </if>
            <if test="account.accountNickname != null and account.accountNickname != ''">
                and account_nickname like concat('%', #{account.accountNickname}, '%')
            </if>
            <if test="account.accountState != null and account.accountState != ''">
                and account_state = #{account.accountState}
            </if>
            <if test="account.tag != null and account.tag != ''">
                and tag like concat('%', ${account.tag}, '%')
            </if>
        </where>
        order by id
        limit #{offset}, #{limit}
    </select>

    <select id="queryAllConditionalByLimit" resultMap="AccountMap" databaseId="postgresql">
        select
        id, application_name, account_name, account_nickname, account_avatar, account_state, last_logintime, tag,
        createtime, updatetime
        from account
        <where>
            <if test="account.id != null">
                and id = #{account.id}
            </if>
            <if test="account.applicationName != null and account.applicationName != ''">
                and application_name = #{account.applicationName}
            </if>
            <if test="account.accountName != null and account.accountName != ''">
                and account_name like concat('%', #{account.accountName} , '%')
            </if>
            <if test="account.accountNickname != null and account.accountNickname != ''">
                and account_nickname like concat('%', #{account.accountNickname}, '%')
            </if>
            <if test="account.accountState != null and account.accountState != ''">
                and account_state = #{account.accountState}
            </if>
            <if test="account.tag != null and account.tag != ''">
                and tag like concat('%', ${account.tag}, '%')
            </if>
        </where>
        order by id
        limit #{limit} offset #{offset}
    </select>

    <select id="countAllConditional" resultType="int">
        select count(1)
        from account
        <where>
            <if test="account.id != null">
                and id = #{account.id}
            </if>
            <if test="account.applicationName != null and account.applicationName != ''">
                and application_name = #{account.applicationName}
            </if>
            <if test="account.accountName != null and account.accountName != ''">
                and account_name like concat('%', #{account.accountName} , '%')
            </if>
            <if test="account.accountNickname != null and account.accountNickname != ''">
                and account_nickname like concat('%', #{account.accountNickname}, '%')
            </if>
            <if test="account.accountState != null and account.accountState != ''">
                and account_state = #{account.accountState}
            </if>
            <if test="account.tag != null and account.tag != ''">
                and tag like concat('%', ${account.tag}, '%')
            </if>
        </where>
    </select>

    <select id="accountNameExist" resultType="int">
        select count(id)
        from account
        where application_name = #{applicationName}
        and account_name = #{accountName}
    </select>

    <select id="accountNicknameExist" resultType="int">
        select count(id)
        from account
        where application_name = #{applicationName}
        and account_nickname = #{accountNickname}
    </select>

    <!--新增所有列-->
    <insert id="insert">
        insert into account(id, application_name, account_name, account_nickname, account_avatar, account_state, tag)
        values (#{id}, #{applicationName}, #{accountName}, #{accountNickname}, #{accountAvatar}, #{accountState}, #{tag})
    </insert>

    <insert id="insertBatch">
        insert into account(id, application_name, account_name, account_nickname, account_avatar,
        account_state, tag)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.id}, #{entity.applicationName}, #{entity.accountName}, #{entity.accountNickname},
            #{entity.accountAvatar},
            #{entity.accountState}, #{entity.tag})
        </foreach>
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update account
        <set>
            <if test="accountName != null and accountName != ''">
                account_name = #{accountName},
            </if>
            <if test="accountNickname != null and accountNickname != ''">
                account_nickname = #{accountNickname},
            </if>
            <if test="accountAvatar != null">
                account_avatar = #{accountAvatar},
            </if>
            <if test="accountState != null and accountState != ''">
                account_state = #{accountState},
            </if>
            <if test="lastLogintime != null">
                last_logintime = #{lastLogintime},
            </if>
            <if test="tag != null and tag != ''">
                tag = #{tag},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from account where id = #{id}
    </delete>

    <!-- 查询账户状态 -->
    <select id="queryAccountStateById" resultType="java.lang.String">
        select account_state
        from account
        where id = #{id}
    </select>

    <!-- 修改账户状态 -->
    <update id="updateAccountStateById">
        update account
        set account_state = #{accountState}
        where id = #{id}
    </update>
</mapper>